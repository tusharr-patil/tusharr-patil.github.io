[{"categories":["System Design Fundamentals"],"content":"Consistency refers to how fresh a particular piece of data is. Technically speaking, every read requests we receive to our distrubuted severs, must return same piece of data.\nConsistency levels refers to how fresh we want our data to be, when a user sends a read request. There will be a tradeoff between consistency and efficiency in Consistency Levels. So, it is necessary to choose the consistency level depending upon the requirement.\nLinearizable/Atomic Consistency For every read request we receive, we want to show fresh data.\nTo achieve this, every request (read or write) must be in order. And to maintain the order, we use a single threaded single sever.\nThis will have strong consistency. But the efficiency is lowest.\nUsecase: Banking Transactions, Product Availability Update, etc.\nEventual Consistency For a read request, we will send stale data, but eventually when the data gets updated, we will send fresh data.\nThe system is not consistency in the beginning, but eventually, it will have consistency.\nTo achieve this, we can process requests parallely (using multiple severs) or concurrently (using multiple threads).\nThe consistency is lowest, but efficiency is highest.\nUsecase: Like, Comments, DNS, Sharing Post on social apps, etc.\nCausal Consistency Based upon the relation of operations, we execute the related operations in order.\nWe can find the relation of operations by checking the type of data on which the operations are doing read/write operation.\nIf we have two operations:\nwrite x = ‘John’ read x Notice, that both requests are going to perform operation on same data item. So, we will execute these two requests in order in a server/thread.\nBut, if we have:\nwrite x = ‘John’ write y = ‘Cena’ Notice, that both requests are performing operation on different piece of data item, so we will execute these two requests on seperate server/thread.\nCausal Consistency is better than Linearizable interms of efficiency and Eventual Consistency in terms of consistency.\nBut the drawback is that the Causal Consistency will fail for aggregation, and will showstale data for aggregation operations.\nThe reason why it fails is because it will not be able to find relationship between aggregation operations, and it might treat the aggregation operation as related.\nUsecase: Google Docs (multiple edits), chat systems, multi-player games, etc.\n","tags":["System Design","CS Fundamentals"],"title":"Consistency Levels in Distrubuted System","uri":"/posts/data-consistency/"},{"categories":null,"content":"Hello World, I will be sharing poorly written blogs on topics like System Design, Algorithms \u0026 some productivity stuff.\n","tags":null,"title":"Hello World","uri":"/posts/hello-world/"}]
